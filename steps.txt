make a folder "CHATBOT2".
make project folder "customer-support-bot".
make frontend & backend folders inside it named "client & server".

get into customer-service-bot using cmd "cd .\customer-support-bot\"
get into server using "cd .\server\"

SERVER:
run cmd "python -m venv .venv".
run cmd ". .venv\Scripts\Activate.ps1"
run cmd "python -m pip install --upgrade pip"
run cmd "pip install python-dotenv openai google-generativeai"
create .env inside server and add OPENAI_API_KEY and assign it a key.
create server/test-openai.py and add code:

{
    import os
from dotenv import load_dotenv
load_dotenv()

from openai import OpenAI

api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise SystemExit("OPENAI_API_KEY not set in .env")

client = OpenAI(api_key=api_key)

resp = client.chat.completions.create(
    model="gpt-4o-mini",  # cheap & fast; change if you have a different plan
    messages=[{"role":"user","content":"Reply with: OPENAI_OK"}],
)
print(resp.choices[0].message.content)

}




run cmd "python test_openai.py", it should respond "OPENAI_OK".
NOW LET's PREPARE FOR FLASK:
run cmd "pip install fastapi uvicorn". (click create on popup and select Python interpreter from above).
create server/main.py and code:

{
    import os
from dotenv import load_dotenv
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from openai import OpenAI

load_dotenv()
app = FastAPI()

# âœ… Enable CORS so frontend (Vite) can call backend (FastAPI)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],   # for production, replace "*" with frontend URL
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Request body schema
class ChatRequest(BaseModel):
    message: str

@app.post("/chat")
def chat(req: ChatRequest):
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": req.message}],
    )
    return {"reply": response.choices[0].message.content}

}


run cmd to run server "uvicorn main:app --reload".
go to http://127.0.0.1:8000/docs and try out (click on POST/chat, in parameters section, click "Try it out" and send message in message json and execute and check respond at the last of page inside json.)

<hr>

CLIENT:
open another terminal, it will open in "CHATBOT2".
enter into project folder "customer-support-bot".
run cmd "npm create vite@latest client"
cd client
npm install npm run dev
npm install axios
clear out client/src folder and make ready App.jsx with code:
{
    import { useState } from "react";
    import axios from "axios";

    function App() {
      const [message, setMessage] = useState("");
      const [chat, setChat] = useState([]);

      const sendMessage = async () => {
        if (!message.trim()) return;

        // Add user message to chat
        setChat([...chat, { role: "user", content: message }]);

        try {
            const res = await axios.post("http://127.0.0.1:8000/chat", {
            message,
        });

        // Add bot reply to chat
        setChat((prev) => [...prev, { role: "assistant", content: res.data.reply }]);
        } catch (err) {
            console.error(err);
            setChat((prev) => [...prev, { role: "assistant", content: "Error: could not reach backend" }]);
        }

        setMessage(""); // clear input
        };

    return (
    <div style={{ maxWidth: "600px", margin: "0 auto", padding: "1rem" }}>
      <h1>Customer Support Bot</h1>

      <div style={{ border: "1px solid #ccc", padding: "1rem", minHeight: "300px" }}>
        {chat.map((msg, i) => (
          <p key={i} style={{ textAlign: msg.role === "user" ? "right" : "left" }}>
            <b>{msg.role}:</b> {msg.content}
          </p>
        ))}
      </div>

      <div style={{ marginTop: "1rem" }}>
        <input
          type="text"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          style={{ width: "80%", padding: "0.5rem" }}
        />
        <button onClick={sendMessage} style={{ padding: "0.5rem 1rem" }}>
          Send
        </button>
      </div>
    </div>
    );
    }

    export default App;
}
run cmd "npm run dev", also make sure that server is running in backend.
